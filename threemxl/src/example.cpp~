#include <ros/ros.h>
#include <threemxl/example.h>
#include <threemxl/C3mxlROS.h>
#include <std_msgs/Int32.h>
#include <rosbag/bag.h>
#include <iostream>     // std::cout
#include <cmath>        // std::abs

void DxlROSExample::init(char *path)
{
  CDxlConfig *config = new CDxlConfig();

  if (path)
  {
    ROS_INFO("Using shared_serial");
    motor_ = new C3mxlROS(path);
  }
  else
  {
    ROS_INFO("Using direct connection");
    motor_ = new C3mxl();
    
    serial_port_.port_open("/dev/ttyUSB1", LxSerial::RS485_FTDI);
    serial_port_.set_speed(LxSerial::S921600);
    motor_->setSerialPort(&serial_port_);
  }

  motor_->setConfig(config->setID(109));
  motor_->init(false);
  closed = false;
  cur = 0;
  count = 0;
  delete config;
}

void DxlROSExample::chatterCallback(const std_msgs::Int32::ConstPtr& m)
{
   
   if( !closed && m->data > 25){
     motor_->setPWM(-1);
     usleep(500000);
     motor_->setPWM(-0.3);
     sleep(1);
     motor_->getState();
     motor_->getStatus();
     cur = motor_->presentCurrent();
     prev = motor_->presentCurrent();
     check = 0;
     closed = true;
   }
  motor_->getState();
  motor_->getStatus();
  
  if(prev == motor_->presentCurrent()){
	check++;
  }else{
     prev = motor_->presentCurrent();
  }
  if (prev >= 3){
     cur = motor_->presentCurrent();
  }
  
  if(closed && cur - motor_->presentCurrent() > 0.004){
     count++;
  }else{
     count = 0;
  }
  if(closed && count > 2){
      motor_->setPWM(1);
      sleep(1);
      motor_->setPWM(0);
      count = 0;
      closed = false;
   }
   
   
}

void DxlROSExample::spin()
{
      motor_->setPWM(1);
      sleep(1);
      motor_->setPWM(0);
    ros::NodeHandle n;
    ros::Subscriber sub = n.subscribe<std_msgs::Int32>("chatter", 1, &DxlROSExample::chatterCallback, this);
    ros::spin();

}

int main(int argc, char **argv)
{
  ros::init(argc, argv, "dxl_ros_example");

  char *path=NULL;
  if (argc == 2)
    path = argv[1];
 
  DxlROSExample dxl_ros_example;
  dxl_ros_example.init(path);
  dxl_ros_example.spin();
  
  return 0;   
} 

