"""autogenerated by genpy from threemxl/MultiArrayFloat32.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class MultiArrayFloat32(genpy.Message):
  _md5sum = "20fc89e40d151d6a5828699657cffb3c"
  _type = "threemxl/MultiArrayFloat32"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# Please look at the MultiArrayLayout message definition for
# documentation on all multiarrays.

time		  data
float32[]         mic1          # array of mic1
float32[]         mic2          # array of mic2
float32[]         mic3          # array of mic3
float32[]         mic4          # array of mic4
"""
  __slots__ = ['data','mic1','mic2','mic3','mic4']
  _slot_types = ['time','float32[]','float32[]','float32[]','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       data,mic1,mic2,mic3,mic4

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MultiArrayFloat32, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.data is None:
        self.data = genpy.Time()
      if self.mic1 is None:
        self.mic1 = []
      if self.mic2 is None:
        self.mic2 = []
      if self.mic3 is None:
        self.mic3 = []
      if self.mic4 is None:
        self.mic4 = []
    else:
      self.data = genpy.Time()
      self.mic1 = []
      self.mic2 = []
      self.mic3 = []
      self.mic4 = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2I.pack(_x.data.secs, _x.data.nsecs))
      length = len(self.mic1)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.mic1))
      length = len(self.mic2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.mic2))
      length = len(self.mic3)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.mic3))
      length = len(self.mic4)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.pack(pattern, *self.mic4))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.data is None:
        self.data = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.data.secs, _x.data.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.mic1 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.mic2 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.mic3 = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.mic4 = struct.unpack(pattern, str[start:end])
      self.data.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2I.pack(_x.data.secs, _x.data.nsecs))
      length = len(self.mic1)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.mic1.tostring())
      length = len(self.mic2)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.mic2.tostring())
      length = len(self.mic3)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.mic3.tostring())
      length = len(self.mic4)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.mic4.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.data is None:
        self.data = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.data.secs, _x.data.nsecs,) = _struct_2I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.mic1 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.mic2 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.mic3 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      end += struct.calcsize(pattern)
      self.mic4 = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      self.data.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2I = struct.Struct("<2I")
